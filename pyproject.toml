[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-learn-py"
version = "0.1.0"
description = "A comprehensive MCP (Model Context Protocol) server implementation for learning purposes"
authors = [
    { name = "MCP Learner", email = "learner@example.com" }
]
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
keywords = ["mcp", "model-context-protocol", "ai", "llm", "server"]

dependencies = [
    # Official MCP SDK (replaces custom JSON-RPC implementation)
    "mcp[cli]>=0.9.0",

    # Core web framework
    "fastapi>=0.68.0",
    "uvicorn[standard]>=0.15.0",
    "pydantic>=2.0.0",  # Required by MCP SDK
    "python-dotenv>=0.19.0",

    # HTTP client
    "httpx>=0.24.0",

    # Utilities
    "structlog>=21.5.0",
    "beautifulsoup4>=4.10.0",
    "psutil>=5.8.0",
    "requests>=2.25.0",
    "aiofiles>=0.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
]
docker = [
    "gunicorn>=21.2.0",
]

[project.urls]
Homepage = "https://github.com/your-username/mcp-learn-py"
Repository = "https://github.com/your-username/mcp-learn-py.git"
Documentation = "https://github.com/your-username/mcp-learn-py/blob/main/README.md"
"Bug Tracker" = "https://github.com/your-username/mcp-learn-py/issues"

[project.scripts]
mcp-server = "src.scripts.start_server:main"
mcp-test-client = "src.scripts.test_client:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
strict_optional = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=src --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]