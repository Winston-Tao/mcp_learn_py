version: '3.8'

# Production Docker Compose configuration
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  mcp-server:
    image: mcp-learning-server:production
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    restart: always
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=WARNING
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    # Remove port mapping in production - use reverse proxy
    ports: []
    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    volumes:
      - ./data:/app/data:ro
      - ./uploads:/app/uploads
      - production-logs:/app/logs

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    # Security options
    security_opt:
      - no-new-privileges:true
    depends_on:
      - mcp-server
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # Production monitoring
  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "127.0.0.1:9090:9090"  # Only bind to localhost
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "127.0.0.1:3000:3000"  # Only bind to localhost
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/production:/etc/grafana/provisioning:ro
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # Log aggregation
  loki:
    image: grafana/loki:latest
    restart: always
    ports:
      - "127.0.0.1:3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  promtail:
    image: grafana/promtail:latest
    restart: always
    volumes:
      - /var/log:/var/log:ro
      - ./monitoring/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - production-logs:/app/logs:ro
      - nginx-logs:/var/log/nginx:ro
    command: -config.file=/etc/promtail/config.yml
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Backup service
  backup:
    image: alpine:latest
    restart: "no"
    volumes:
      - ./data:/data:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: /backup.sh
    profiles:
      - backup

volumes:
  production-logs:
    driver: local
  nginx-logs:
    driver: local
  loki-data:
    driver: local